X = 'X'
O = 'O'
E = ' '

def check_win(b, p):
    win = [
        [b[0][0], b[0][1], b[0][2]],
        [b[1][0], b[1][1], b[1][2]],
        [b[2][0], b[2][1], b[2][2]],
        [b[0][0], b[1][0], b[2][0]],
        [b[0][1], b[1][1], b[2][1]],
        [b[0][2], b[1][2], b[2][2]],
        [b[0][0], b[1][1], b[2][2]],
        [b[0][2], b[1][1], b[2][0]],
    ]
    return [p, p, p] in win

def get_empty(b):
    return [(i, j) for i in range(3) for j in range(3) if b[i][j] == E]

def minimax(b, is_max):
    if check_win(b, X): return 1
    if check_win(b, O): return -1
    if not get_empty(b): return 0

    if is_max:
        best = -10
        for i, j in get_empty(b):
            b[i][j] = X
            best = max(best, minimax(b, False))
            b[i][j] = E
        return best
    else:
        best = 10
        for i, j in get_empty(b):
            b[i][j] = O
            best = min(best, minimax(b, True))
            b[i][j] = E
        return best

def best_move(b):
    best_val = -10
    move = None
    for i, j in get_empty(b):
        b[i][j] = X
        move_val = minimax(b, False)
        b[i][j] = E
        if move_val > best_val:
            best_val = move_val
            move = (i, j)
    return move

def show(b):
    for row in b:
        print('|'.join(row))
    print()

# Example
board = [
    [E, E, E],
    [E, O, E],
    [E, E, E]
]

print("Board:")
show(board)
move = best_move(board)
print("Best move for X:", move)
