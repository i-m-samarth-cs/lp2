class DisjointSet:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])  # Path compression
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x == root_y:
            return False
        if self.rank[root_x] < self.rank[root_y]:
            self.parent[root_x] = root_y
        elif self.rank[root_x] > self.rank[root_y]:
            self.parent[root_y] = root_x
        else:
            self.parent[root_y] = root_x
            self.rank[root_x] += 1
        return True

def kruskal_mst(graph, vertices):
    graph.sort(key=lambda x: x[2])
    result = []
    ds = DisjointSet(vertices)
    edge_count = 0
    i = 0
    while edge_count < vertices - 1 and i < len(graph):
        u, v, w = graph[i]
        i += 1
        if ds.find(u) != ds.find(v):
            result.append((u, v, w))
            ds.union(u, v)
            edge_count += 1
    return result

if __name__ == "__main__":
    print("Kruskal's Algorithm - Minimum Spanning Tree (MST)")

    vertices = int(input("Enter the number of vertices: "))
    edges = int(input("Enter the number of edges: "))

    graph = []
    print(f"Enter {edges} edges in the format: u v weight")
    for _ in range(edges):
        u, v, w = map(int, input("Edge: ").split())
        graph.append((u, v, w))

    mst = kruskal_mst(graph, vertices)

    print("\nEdges in the Minimum Spanning Tree:")
    total_weight = 0
    for u, v, w in mst:
        print(f"Edge ({u} - {v}) with weight {w}")
        total_weight += w
    print(f"Total weight of MST: {total_weight}")
